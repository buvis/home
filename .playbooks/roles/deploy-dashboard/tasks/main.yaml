---
# main task file for roles/deploy-metallb

- name: create {{ app_namespace }} namespace
  become: yes
  shell: |
    k3s kubectl delete namespace {{ app_namespace }} 2>/dev/null
    k3s kubectl create namespace {{ app_namespace }}

- name: create manifests directory for deployment
  become: no
  file:
    path: "/home/{{ default_user }}/.kube/manifests/{{ app_name }}"
    state: directory

- name: copy manifests
  become: false
  copy:
    src: files/
    dest: "/home/{{ default_user }}/.kube/manifests/{{ app_name }}/"
    owner: "{{ default_user }}"
    group: "{{ default_user }}"
    mode: "0700"

- name: delete {{ app_name }} admin-user
  become: yes
  shell: "k3s kubectl delete clusterrolebinding {{ app_name }} 2>/dev/null"
  ignore_errors: yes

- name: create {{ app_name }} admin-user
  become: yes
  shell: "k3s kubectl apply -f /home/{{ default_user }}/.kube/manifests/{{ app_name }}/{{ item }}.yaml;"
  with_items:
    - dashboard-admin

- name: add {{ helm_repository_name }} repo
  kubernetes.core.helm_repository:
    name: "{{ helm_repository_name }}"
    repo_url: "{{ helm_repository_url }}"

- name: uninstall {{ app_namespace }}/{{ app_name }}
  kubernetes.core.helm:
    release_namespace: "{{ app_namespace }}"
    release_name: "{{ app_name }}"
    state: absent
    wait: yes
  ignore_errors: yes

- name: deploy {{ app_namespace }}/{{ app_name }}
  kubernetes.core.helm:
    chart_ref: "{{ helm_chart_ref }}"
    create_namespace: yes
    release_namespace: "{{ app_namespace }}"
    release_name: "{{ app_name }}"
    update_repo_cache: yes
    atomic: yes
    wait: yes

- name: wait for {{ app_namespace }}/{{ app_name }} pods to come up
  become: yes
  shell: "k3s kubectl wait --namespace {{ app_namespace }} --for=condition=ready pods --all --timeout=300s"

- name: read access token
  become: yes
  shell: "k3s kubectl -n {{ app_namespace }} describe secret $(kubectl -n {{ app_namespace }} get secret | grep admin-user | awk '{print $1}') | grep 'token:' | awk '{print $2}'"
  register: user_token

- name: prepare kubernetes local config directory
  become: no
  local_action:
    module: file
    path: "~/.kube"
    state: directory

- name: download access token to ~/.kube/kubernetes-dashboard-token
  become: no
  local_action:
    module: copy
    content: "{{ user_token.stdout }}"
    dest: "~/.kube/kubernetes-dashboard-token"
