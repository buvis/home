#!/usr/bin/env python3
# zettelize

# This takes a file and creates a zettel from it.

import os
import platform
import re
import time
from argparse import ArgumentParser
from datetime import datetime, timezone
from email.utils import mktime_tz, parsedate_tz
from pathlib import Path

import unidecode
from slugify import slugify

parser = ArgumentParser()
parser.add_argument(
    "-p",
    "--path",
    dest="path",
    help="path directory or \
                    file to slugify",
)
args = parser.parse_args()


def deslugify(str):
    return str.replace("-", " ").capitalize()


def get_zettel(path):
    if len(path.stem) >= 14:
        zettel_id = path.stem[:14]
    else:
        zettel_id = ""

    if len(path.stem) > 14:
        zettel_title = path.stem[14:]
    else:
        zettel_title = ""

    try:
        zettel_datetime = datetime.strptime(zettel_id, "%Y%m%d%H%M%S")
    except ValueError:
        zettel_datetime = datetime.fromtimestamp(os.path.getmtime(path))
        zettel_title = path.stem

    zettel_id = zettel_datetime.strftime("%Y%m%d%H%M%S")
    zettel_title = deslugify(zettel_title)

    zettel = dict()
    zettel["id"] = zettel_id
    zettel["title"] = zettel_title
    zettel["date"] = zettel_datetime

    return zettel


if args.path:
    paths = args.path.replace("\ ", "!@#")
    paths = paths.split(" ")

    for path in paths:
        path = path.replace("!@#", " ")

        if platform.system() != "Windows":
            path = path.replace("\\", "")

        old = Path(path)
        with open(old, "r") as file_object:
            old_content = file_object.readlines()
        zettel = get_zettel(old)
        zettel["tags"] = []

        if old_content[0] == "---\n":

            if old_content[1][:3] == "id:":
                zettel["id"] = old_content[1][4:18]
            elif old_content[1][:7] == "zkn-id:":
                zettel["id"] = old_content[1][8:22]

            if old_content[2][:6] == "title:":
                zettel["title"] = old_content[2][7:].strip()

            if old_content[4][:5] == "tags:":

                for tag in old_content[4][6:].split("#"):
                    if tag.strip() != "":
                        zettel["tags"].append(tag.strip())

            zettel["date"] = datetime.strptime(zettel["id"], "%Y%m%d%H%M%S")

        renamed = f"{zettel['id']}.md"
        content = f"""\
---
id: {zettel["id"]}
title: {zettel["title"]}
date: {zettel["date"].astimezone().replace(microsecond=0).isoformat()}
type: wiki-article
tags: [{", ".join(zettel["tags"])}]
---

# {zettel["title"]}

{"".join(old_content)}

---
---""".rstrip()

        with open(old, "w") as file_object:
            file_object.write(content)

        os.rename(path, os.path.join(old.parent, renamed))
